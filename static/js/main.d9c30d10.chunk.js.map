{"version":3,"sources":["ticTacToe.jsx","App.js","serviceWorker.js","index.js"],"names":["styleB","width","height","margin","display","gridTemplate","Board","squares","onClick","style","map","square","i","key","value","Square","className","TicTacToe","useState","Array","fill","board","setBoard","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","boardCopy","id","Home","About","Test","App","basename","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAyBA,IAqCMA,EAAS,CACXC,MAAO,OACPC,OAAQ,OACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAGZC,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,QAAZ,OACV,yBAAKC,MAAOT,GACRO,EAAQG,KAAI,SAACC,EAAQC,GAAT,OACR,kBAAC,EAAD,CAAQC,IAAKD,EAAGE,MAAOH,EAAQH,QAAS,kBAAMA,EAAQI,WAK5DG,EAAS,SAAC,GAAD,IAAED,EAAF,EAAEA,MAAQN,EAAV,EAAUA,QAAV,OACX,4BAAQQ,UAAU,cAAcR,QAASA,GACpCM,IAKMG,EA5DG,WAAM,MAEMC,mBAASC,MAAM,GAAGC,KAAK,OAF7B,mBAEbC,EAFa,KAENC,EAFM,OAIUJ,oBAAS,GAJnB,mBAIbK,EAJa,KAIJC,EAJI,KAMdC,EA1BV,SAAyBlB,GAWrB,IAVA,IAAMmB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAd,EAAI,EAAGA,EAAIc,EAAMC,OAAQf,IAAK,CAAC,IAAD,cACnBc,EAAMd,GADa,GAC9BgB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIvB,EAAQqB,IAAMrB,EAAQqB,KAAOrB,EAAQsB,IAAMtB,EAAQqB,KAAOrB,EAAQuB,GACpE,OAAOvB,EAAQqB,GAGnB,OAAO,KASQG,CAAgBV,GAe/B,OACI,6BACI,wBAAIL,UAAU,aAAd,eACA,yBAAKA,UAAU,oBACf,kBAAC,EAAD,CAAOT,QAASc,EAAOb,QAjBf,SAAAI,GAClB,IAAMoB,EAAS,YAAOX,GAEhBI,GAAUO,EAAUpB,KAExBoB,EAAUpB,GAAKW,EAAU,IAAM,IAE/BD,EAASU,GAETR,GAAYD,OASN,yBAAKP,UAAU,kBACT,2BAAIS,EAAS,WAAaA,EAAS,iBAAmBF,EAAU,IAAM,MACtE,4BAAQU,GAAG,eAAezB,QAAS,kBAAMc,EAASH,MAAM,GAAGC,KAAK,SAAhE,kBC9BhB,IAAMc,EAAO,kBAAM,6BAAK,yCAClBC,EAAQ,kBAAM,6BAAK,uCACnBC,EAAO,kBAAM,6BAAK,kBAAC,EAAD,QAETC,EAtBf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KACrB,6BACC,4BACC,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,WAEL,6BACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWP,IAChC,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWN,OCLjBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9c30d10.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n// function to check winner \n// array of all possible wins\n// iterate through the board to see matching letter \nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\nconst TicTacToe = () => {\n  // hook to set the board with 9 elements\n    const [board, setBoard] = useState(Array(9).fill(null));\n  // hook to change player's turn\n    const [xIsNext, setXisNext] = useState(true);\n  // check the winner \n    const winner = calculateWinner(board);\n\nconst handleClick = i => {\n  const boardCopy = [...board];\n  // If user click an occupied square or if game is won, return\n    if (winner || boardCopy[i]) return;\n    // Put an X or an O in the clicked square\n    boardCopy[i] = xIsNext ? 'X' : 'O';\n    // re-render the board\n    setBoard(boardCopy);\n    // change player's turn\n    setXisNext(!xIsNext);\n}\n   // if there is a winner render winner else next player's turn\n   // start new game will reset the board with 9 elements\n    return (\n        <div>\n            <h1 className=\"gameTitle\">Tic Tac Toe</h1>\n            <div className=\"ticTac-container\">\n            <Board squares={board} onClick={handleClick} />\n          <div className=\"ticTacToeStyle\">\n                <p>{winner ? 'Winner: ' + winner : 'Next Player: ' + (xIsNext ? 'X' : 'O')}</p>\n                <button id='ticTacButton' onClick={() => setBoard(Array(9).fill(null))}>Start Game</button>\n          </div>  \n          </div>\n        </div>\n    )\n\n}\n\n// inline styling for the board \nconst styleB = {\n    width: '16em',\n    height: '16em',\n    margin: '0 auto',\n    display: 'grid',\n    gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'\n}\n\nconst Board = ({ squares, onClick}) => (\n    <div style={styleB}>\n       {squares.map((square, i) => (\n            <Square key={i} value={square} onClick={() => onClick(i)} />\n        ))}\n    </div>\n)\n\nconst Square = ({value , onClick}) => (\n    <button className=\"buttonStyle\" onClick={onClick}>\n        {value}\n    </button>\n);\n\n\nexport default TicTacToe;","import React from 'react';\nimport './App.css';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport TicTacToe from \"./ticTacToe.jsx\"\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n    <div>\n     <ul>\n      <li><Link to=\"/\">Homee</Link></li>\n      <li><Link to=\"/about\">About</Link></li>\n      <li><Link to=\"/test\">About</Link></li>\n     </ul>\n     <hr />\n     <Route exact path=\"/\" component={Home} />\n     <Route path=\"/about\" component={About} />\n     <Route path=\"/about\" component={Test} />\n    </div>\n   </HashRouter>\n  );\n\n}\nconst Home = () => <div><h2>Homeeee</h2></div>\nconst About = () => <div><h2>About</h2></div>\nconst Test = () => <div><TicTacToe /></div>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}